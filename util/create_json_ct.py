# -*- coding: utf-8 -*-
"""Create_Annotations_JSON.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o8aFID-Kz7GJV764eSTGQTEwlnkGLz6w
"""

from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import glob
import re
import time
import sys

def sort_list(l):
    convert = lambda text: int(text) if text.isdigit() else text
    alphanum_key = lambda key: [convert(c) for c in re.split('([0-9]+)', key)]
    return sorted(l, key = alphanum_key)

ret = []

thresh = 200

def floodfill(x, y):
    if matrix[x][y] > thresh: 
        matrix[x][y] = 0 
        ret.append((x,y))
        if x > 0:
            floodfill(x-1,y)
        if x < matrix.shape[0] - 1:
            floodfill(x+1,y)
        if y > 0:
            floodfill(x,y-1)
        if y < matrix.shape[1] - 1:
            floodfill(x,y+1)

def flood():
    arr = []
    for r in range(matrix.shape[0]):
        for c in range(matrix.shape[1]):
            if (matrix[r][c] > thresh):
                ret.clear()
                floodfill(r, c)
                m = []
                for i in ret:
                    m.append(i)
                arr.append(m)
    return arr

import json
import random
import numpy as np
from scipy.spatial import ConvexHull
import matplotlib.pyplot as plt

sys.setrecursionlimit(300000)
data = {}

def show(index):
    ans = [] 
    a = arr[index]
    x = []
    y = []
    for tup in a:
      x.append(tup[0])
      y.append(tup[1])

    allPoints=np.column_stack((x,y))
    hull = ConvexHull(allPoints)

    plt.scatter(x, y, label= "o", color= "blue",  
            marker= "o", s=30) 

    for simplex in hull.simplices:
        ans.append((allPoints[simplex, 0][0], allPoints[simplex, 1][0]))
    
    return ans

mask_list = sort_list(glob.glob('/Users/vignavramesh/Downloads/mask-slices/*.png'))
scan_list = sort_list(glob.glob('/Users/vignavramesh/Downloads/images2/train/*.png'))

for i in range(len(mask_list)):
    mask_name = mask_list[i]
    scan_name = scan_list[i]

    img = Image.open(mask_name).convert('L')
    WIDTH, HEIGHT = img.size
    d = list(img.getdata()) 
    d = [d[offset:offset+WIDTH] for offset in range(0, WIDTH*HEIGHT, WIDTH)]
    matrix = np.asarray(d).astype(np.uint8)

    arr = flood()

    size = 2350
    fname = scan_name[scan_name.rindex("train/")+6:]
    name = fname + str(size)
    
    regions = []
    
    for idx in range(len(arr)):
        t = arr[idx]
        if (min(t)[0] == max(t)[0] or min(t, key = lambda q: q[1])[1] == max(t, key = lambda q: q[1])[1]):
            continue
        a = show(idx)
        all_points_x = []
        all_points_y = []
        for tup in a:
            all_points_x.append(int(tup[0]))
            all_points_y.append(int(tup[1]))
    
        shape_attributes = {}
        shape_attributes['name'] = 'polygon'
        shape_attributes['all_points_x'] = all_points_y
        shape_attributes['all_points_y'] = all_points_x

        image_quality = {}
        image_quality['good'] = True
        image_quality['frontal'] = True
        image_quality['good_illumination'] = True

        region_attributes = {}
        region_attributes['name'] = 'not_defined'
        region_attributes['type'] = 'unknown'
        region_attributes['image_quality'] = image_quality
        
        regions.append({
            'shape_attributes':shape_attributes,
            "region_attributes": region_attributes
        })

    file_attributes = {}
    file_attributes['caption'] = ''
    file_attributes['public_domain'] = 'no'
    file_attributes['image_url'] = ''

    data[name] = {}
    data[name]['filename'] = fname
    data[name]['size'] = size
    data[name]['regions'] = regions
    data[name]['file_attributes'] = file_attributes

with open('via_region_data.json', 'w') as outfile:
    json.dump(data, outfile)
# files.download('via_region_data.json')
